import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { Arrangement } from "../../types/Types";
import { fetchArrangements } from "./arrangementsApi";

export interface ArrangementsState {
  value: Arrangement[];
  status: "idle" | "loading" | "failed";
}

const initialState: ArrangementsState = {
  value: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getArrangementsAsync = createAsyncThunk(
  "arrangements/fetchArrangements",
  async () => await fetchArrangements()
);

export const arrangementsSlice = createSlice({
  name: "arrangements",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getArrangementsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getArrangementsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload;
      })
      .addCase(getArrangementsAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export default arrangementsSlice.reducer;
