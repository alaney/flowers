import { createAsyncThunk, createSlice } from "@reduxjs/toolkit"
import { Flower } from "../../types/Types"
import { fetchArrangements as fetchFlowers } from "./flowersApi"

export interface FlowersState {
  value: Flower[]
  status: "idle" | "loading" | "failed"
}

const initialState: FlowersState = {
  value: [],
  status: "idle",
}

export const getFlowersAsync = createAsyncThunk("flowers/fetchFlowers", async () => await fetchFlowers())

export const flowersSlice = createSlice({
  name: "flowers",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getFlowersAsync.pending, (state) => {
        state.status = "loading"
      })
      .addCase(getFlowersAsync.fulfilled, (state, action) => {
        state.status = "idle"
        state.value = action.payload
      })
      .addCase(getFlowersAsync.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export default flowersSlice.reducer
